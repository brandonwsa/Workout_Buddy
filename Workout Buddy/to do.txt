get apps created
	need a users app to manage user login username(PK) and password
	need Workout app
	need Exercise app
	need ExerciseDetails app
	need main app
	
make serializers _DONE for workouts and users - DONE
make models _DONE for workouts and users - DONE
figureout timezone
make functionalty of CRUD to workouts app - DONE for website functionality
get it so other users cant see others workouts but their own - DONE
replace WName in workout/new with 'Workout_Name:'
Make API page for workouts functionality - DONE
	See KNWON ISSUES below - FIXED
make api for workouts - DONE
make workouts forms.py - DONE
make exercise app - DONE
get exercises to appear for a specific workout - DONE
make API for exercise app - DONE
Get date to be autofilled in when creating exercise when coming from workout/new page or coming from workout/update page - DONE
When doing the 'add your results to an existing workout plan' on home page, make it have you either select an existing workout
	to edit and go from there to adding exercises, or have it redirect you to your workouts page where you can see
	all your workouts and select one - DONE
Make a visual display for user to see their exercises being added to table in exercises/new - DONE
make CRUD for exercise app - DONE
When deleting workout, delete all exercises associated with it. Need to CASCAD a WID in exercise model possibly for this - DONE
make exercisedetails app - DONE
able to create new exercisedetails successfully, get volume transfer to associated exercise working - DONE
make CRUD for exercisedetails app - DONE
Create custom API urls with slugs
Create back to home button on API page
add try excepts, be sure to add logs when doing this
MAKE WEBSITE FUNCTIONALITY AND APPEARENCE BETTER FOR USER
	put workouts, exercises, exercisedetails in a content section like the homepage - DONE
		in the content sections add the buttons associated with each app there instead of on details page - DONE
	when clicking on a workout, have it display the exercises associated w/ the workout instead of workout details - DONE
	Have drop down box for exercises view to view exercises by date - Dont think really needed w/ how web app is made
		may be able to apply this to workouts tho, with a drop down based on name
	add pagnation based on date for exercises
make workoutexercises into its own app and not in Main app
make a button to view workout statistics
	calc average weight used for exercise and reps and sets, can be based off of date of exercises in the workout
	show weights, volume, sets, reps used for each exercise in chart form

Do more testing with postman before implementing a React app

be able to create details when making exercise - DONE
get volume for exercise to appear - DONE
move workoutExercisesListView to exercises app
when deleting exercise details, make sure to remove its volume from the exercise it is associated with - DONE
have date update with workouts when updating in exercises. 

POSSIBLE ISSUES:
	we are able to make a duplicate exercise with same name and date and checkbox cause of id being pk in Exercises

KNOWN ISSUES:
FIXED - When trying to view API page for exercisedetails, getting improperlyconfigured exception. Tried fixing, no luck so far.
	It is mainly because the view for the exercise the exercisedetails is associated with is unable to be made properly
	The api page works when we remove the workout_id from the serializer field
	FIXED BY USING, exercise_id in exercisedetails serializer as exercisesserializer instead of a url.
		can also use CharField(read_only=True) to just get the name of the exercise instead as well.
FIXED - when including router urls to patternurls for api functionality to be used, when clicking on a workout to view its details
	the user is directed to the api page for the workout details instead.



Can either make a new workout for each entry of your day, or select existing workout and add exercises to it.
	can order and get results by date if doing the later.


check to see if we have to add anything to urls
	added the code from django restful framework in urls.py, gotta see if we actually need some of it tho, like the serializer


exercise table example: needs to be split up in different joinable tables

FOR MONOLITHIC APPROACH, will not be doing:
+ = pk		- = fk

entities:
user(username+, email, password1, password2)
workout(WName+, Date+)
exercise(EName+, Date+, weight+, sameWeight(y/n), sets, reps, volume)

relationships:
belongs to - exercise to workout

diagram:
[workout]--N--{belongs to}--M--[exercise]

tables:
belongs to(WName+-, userName+-, EName+-, Date+-, weight+-)
exercise(EName+, Date+, weight+, sameWeight(y/n), sets, reps, volume)

Make user enter in date for their workout, then carry that data into exercises table view autofilling field with date
from corresponding workout.. Will know what workout because will be coming from creating a new a new one or a workout page

COULD potentially make another database app that would hold workout IDs that are associated with Exercises.
	this database could be in main app. model would be called: ExercisesInWorkouts where a many-to-one relation
	would exist. Many exercise ID's could belong to one workout ID. Exercise ID's may also be different even if
	the exercise is the same name, as the new exercise added is from a different day. This new exercise would
	still be mapped to the Workout ID. Can get specific exercises done a partical day based on looking at the date
	you want the list of exercises from. These exercises will be mapped to a specific workout ID when user adds
	the new/updated exercises to the workout. This can be done by grabbing the Workout ID from the url as that is
	the PK. Simply then set the WID in Exercises model to that PK.

	Doing this approach ensures that no accidental data will appear as we are currently displaying exercises
	associated with workouts based on date and the user that is logged in. This is problematic because if the user
	does multiple workouts in a day and logs them, then all the exercises from those workouts will appear when the user
	only wants to view the exercises in one of the workouts they did that day.

	This ExercisesInWorkouts model will need to havbe its fields filled in when the user fully enters in all their
	exercises in their workout. The user will not have any CRUD access to this database as this database is for
	behind the scenes.
	
	To get this to work, have a confirm.html file in the main app. This page will ask the user to confirm their entries
	and once they hit confirm, where workout is equal to the pk in url, put workout id pk in ExercisesInWorkouts model, 
	get the date and find date in exercises
	model that matches user. Add exercises id to ExercisesInWorkouts model. If the id exists, will not add exercise
	**This is still just a theory in progress**

	Or just use workout pk as a foreignkey in exercises model.
	^ use this if we continue to use only one database for project, SQLite
	can probably just get the exercises based of of the workout PK if we make a fk in exercises table from workouts id. 
	Wont need username info. Can get exercisesdetails for a specific exercise if we also make an exercise id fk in
	exerciseDetails. Should keep dates in all the tables, but wont need username since id's are enough uniqueness.
	Basically only way user will have access to an id is if it their own. Will have to check user associated with workout
	This may cause too much complications with currect system.



FOR MICROSERVICE APPROACH, will be using:

User app table:
UName(pk)	email				password1	password2
brandon		brandon@gmail.com		hashed		hashed
joe		joe@gmail.com			hashed		hashed

Workouts app table:
id(pk)	username(fk)	Date		WName
1	brandon		12-2-20		fullbody1
2	brandon		12-4-20		fullbody2
3	joe		12-4-20		pulls
4	joe		12-5-20		push
5	brandon		12-6-20		additional

Exercises app table:
id(pk)	username(fk)		Date		exercise	SameWeight(y/n)	totalVolume
1	brandon			12-2-20		benchpress	no		2940
2	brandon			12-2-20		backsquat	no		.
3	brandon			12-2-20		pullups		yes		.
4	brandon			12-2-20		hamstringcurls	yes		.
5	brandon			12-2-20		dragcurls	yes		.
6	brandon			12-2-20		facepulls	yes		1260
7	brandon			12-4-20		deadlift	no		.
8	.			.		.		.		.
9	joe			12-4-20		bentoverrow	no		4210
10	joe			12-4-20		facepulls	yes		.
11	joe			12-4-20		armcurls	yes		.
12	joe			12-4-20		latpulldowns	no		.
13	joe			12-4-20		deadlift	no		.


ExerciseDetails app table:
username(fk)(pk)	Date(fk)(pk)	EName(fk)(pk)	weight(pk)	setAmount	totalReps	volume
brandon			12-2-20		benchpress	110		1		10		1100
brandon			12-2-20		benchpress	115		2		16		1840
.			.		.		.		.		.		.
brandon			12-2-20		facepulls	42		3		30		1260
.			.		.		.		.		.		.
joe			12-4-20		bentoverrow	135		1		10		1350
joe			12-4-20		bentoverrow	185		1		8		1480
joe			12-4-20		bentoverrow	230		1		6		1380
.			.		.		.		.		.		.

can probably just get the exercises based of of the workout PK if we make a fk in exercises table from workouts id. 
Wont need username info.
--revised
Exercises app table:
id(pk)	wID(fk)		date(dontneed)	exercise	SameWeight(y/n)	totalVolume
1	1		12-2-20		benchpress	no		2940
2	1		12-2-20		backsquat	no		.
3	1		12-2-20		pullups		yes		.
4	1		12-2-20		hamstringcurls	yes		.
5	1		12-2-20		dragcurls	yes		.
6	1		12-2-20		facepulls	yes		1260
7	2		12-4-20		deadlift	no		.
.	.		.		.		.		.
9	3		12-4-20		bentoverrow	no		4210
10	3		12-4-20		facepulls	yes		.
11	3		12-4-20		armcurls	yes		.
12	3		12-4-20		latpulldowns	no		.
13	3		12-4-20		deadlift	no		.


ExerciseDetails app table:
id(pk)	eID(fk)	username(fk)(dontneed)	Date(dontneed)	EName(dontneed)		weight		setAmount	totalReps	volume
1	1	brandon			12-2-20		benchpress		110		1		10		1100
2	1	brandon			12-2-20		benchpress		115		2		16		1840
.	.	.			.		.			.		.		.		.
4	6	brandon			12-2-20		facepulls		42		3		30		1260
.	.	.			.		.			.		.		.		.
6	9	joe			12-4-20		bentoverrow		135		1		10		1350
7	9	joe			12-4-20		bentoverrow		185		1		8		1480
8	9	joe			12-4-20		bentoverrow		230		1		6		1380
.	.	.			.		.			.		.		.		.

revised:
id(pk)	eID(fk)		weight		setAmount	totalReps	volume
1	1		110		1		10		1100
2	1		115		2		16		1840
.	.		.		.		.		.
4	6		42		3		30		1260
.	.		.		.		.		.
6	9		135		1		10		1350
7	9		185		1		8		1480
8	9		230		1		6		1380
.	.		.		.		.		.
